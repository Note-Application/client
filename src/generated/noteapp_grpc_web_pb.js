/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: noteapp.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = require('./noteapp_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.CreateUserRequest,
 *   !proto.proto.UserResponse>}
 */
const methodDescriptor_UserService_CreateUser = new grpc.web.MethodDescriptor(
  '/proto.UserService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.proto.CreateUserRequest,
  proto.proto.UserResponse,
  /**
   * @param {!proto.proto.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UserServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser,
      callback);
};


/**
 * @param {!proto.proto.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UserServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetUserByEmailRequest,
 *   !proto.proto.UserResponse>}
 */
const methodDescriptor_UserService_GetUserByEmail = new grpc.web.MethodDescriptor(
  '/proto.UserService/GetUserByEmail',
  grpc.web.MethodType.UNARY,
  proto.proto.GetUserByEmailRequest,
  proto.proto.UserResponse,
  /**
   * @param {!proto.proto.GetUserByEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetUserByEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UserServiceClient.prototype.getUserByEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UserService/GetUserByEmail',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUserByEmail,
      callback);
};


/**
 * @param {!proto.proto.GetUserByEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UserServicePromiseClient.prototype.getUserByEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UserService/GetUserByEmail',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUserByEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.UpdateUserRequest,
 *   !proto.proto.UserResponse>}
 */
const methodDescriptor_UserService_UpdateUser = new grpc.web.MethodDescriptor(
  '/proto.UserService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.proto.UpdateUserRequest,
  proto.proto.UserResponse,
  /**
   * @param {!proto.proto.UpdateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UserServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser,
      callback);
};


/**
 * @param {!proto.proto.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UserServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.DeleteUserRequest,
 *   !proto.proto.DeleteUserResponse>}
 */
const methodDescriptor_UserService_DeleteUser = new grpc.web.MethodDescriptor(
  '/proto.UserService/DeleteUser',
  grpc.web.MethodType.UNARY,
  proto.proto.DeleteUserRequest,
  proto.proto.DeleteUserResponse,
  /**
   * @param {!proto.proto.DeleteUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.DeleteUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.DeleteUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.DeleteUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.DeleteUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.UserServiceClient.prototype.deleteUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser,
      callback);
};


/**
 * @param {!proto.proto.DeleteUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.DeleteUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.UserServicePromiseClient.prototype.deleteUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.NoteServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.NoteServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.CreateNoteRequest,
 *   !proto.proto.NoteResponse>}
 */
const methodDescriptor_NoteService_CreateNote = new grpc.web.MethodDescriptor(
  '/proto.NoteService/CreateNote',
  grpc.web.MethodType.UNARY,
  proto.proto.CreateNoteRequest,
  proto.proto.NoteResponse,
  /**
   * @param {!proto.proto.CreateNoteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.NoteResponse.deserializeBinary
);


/**
 * @param {!proto.proto.CreateNoteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.NoteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.NoteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.NoteServiceClient.prototype.createNote =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.NoteService/CreateNote',
      request,
      metadata || {},
      methodDescriptor_NoteService_CreateNote,
      callback);
};


/**
 * @param {!proto.proto.CreateNoteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.NoteResponse>}
 *     Promise that resolves to the response
 */
proto.proto.NoteServicePromiseClient.prototype.createNote =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.NoteService/CreateNote',
      request,
      metadata || {},
      methodDescriptor_NoteService_CreateNote);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetNoteByIDRequest,
 *   !proto.proto.NoteResponse>}
 */
const methodDescriptor_NoteService_GetNoteByID = new grpc.web.MethodDescriptor(
  '/proto.NoteService/GetNoteByID',
  grpc.web.MethodType.UNARY,
  proto.proto.GetNoteByIDRequest,
  proto.proto.NoteResponse,
  /**
   * @param {!proto.proto.GetNoteByIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.NoteResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetNoteByIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.NoteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.NoteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.NoteServiceClient.prototype.getNoteByID =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.NoteService/GetNoteByID',
      request,
      metadata || {},
      methodDescriptor_NoteService_GetNoteByID,
      callback);
};


/**
 * @param {!proto.proto.GetNoteByIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.NoteResponse>}
 *     Promise that resolves to the response
 */
proto.proto.NoteServicePromiseClient.prototype.getNoteByID =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.NoteService/GetNoteByID',
      request,
      metadata || {},
      methodDescriptor_NoteService_GetNoteByID);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.GetNotesByUserIDRequest,
 *   !proto.proto.GetNotesByUserIDResponse>}
 */
const methodDescriptor_NoteService_GetNotesByUserID = new grpc.web.MethodDescriptor(
  '/proto.NoteService/GetNotesByUserID',
  grpc.web.MethodType.UNARY,
  proto.proto.GetNotesByUserIDRequest,
  proto.proto.GetNotesByUserIDResponse,
  /**
   * @param {!proto.proto.GetNotesByUserIDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.GetNotesByUserIDResponse.deserializeBinary
);


/**
 * @param {!proto.proto.GetNotesByUserIDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.GetNotesByUserIDResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.GetNotesByUserIDResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.NoteServiceClient.prototype.getNotesByUserID =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.NoteService/GetNotesByUserID',
      request,
      metadata || {},
      methodDescriptor_NoteService_GetNotesByUserID,
      callback);
};


/**
 * @param {!proto.proto.GetNotesByUserIDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.GetNotesByUserIDResponse>}
 *     Promise that resolves to the response
 */
proto.proto.NoteServicePromiseClient.prototype.getNotesByUserID =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.NoteService/GetNotesByUserID',
      request,
      metadata || {},
      methodDescriptor_NoteService_GetNotesByUserID);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.UpdateNoteRequest,
 *   !proto.proto.NoteResponse>}
 */
const methodDescriptor_NoteService_UpdateNote = new grpc.web.MethodDescriptor(
  '/proto.NoteService/UpdateNote',
  grpc.web.MethodType.UNARY,
  proto.proto.UpdateNoteRequest,
  proto.proto.NoteResponse,
  /**
   * @param {!proto.proto.UpdateNoteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.NoteResponse.deserializeBinary
);


/**
 * @param {!proto.proto.UpdateNoteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.NoteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.NoteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.NoteServiceClient.prototype.updateNote =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.NoteService/UpdateNote',
      request,
      metadata || {},
      methodDescriptor_NoteService_UpdateNote,
      callback);
};


/**
 * @param {!proto.proto.UpdateNoteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.NoteResponse>}
 *     Promise that resolves to the response
 */
proto.proto.NoteServicePromiseClient.prototype.updateNote =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.NoteService/UpdateNote',
      request,
      metadata || {},
      methodDescriptor_NoteService_UpdateNote);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.DeleteNoteRequest,
 *   !proto.proto.DeleteNoteResponse>}
 */
const methodDescriptor_NoteService_DeleteNote = new grpc.web.MethodDescriptor(
  '/proto.NoteService/DeleteNote',
  grpc.web.MethodType.UNARY,
  proto.proto.DeleteNoteRequest,
  proto.proto.DeleteNoteResponse,
  /**
   * @param {!proto.proto.DeleteNoteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.DeleteNoteResponse.deserializeBinary
);


/**
 * @param {!proto.proto.DeleteNoteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.DeleteNoteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.DeleteNoteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.NoteServiceClient.prototype.deleteNote =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.NoteService/DeleteNote',
      request,
      metadata || {},
      methodDescriptor_NoteService_DeleteNote,
      callback);
};


/**
 * @param {!proto.proto.DeleteNoteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.DeleteNoteResponse>}
 *     Promise that resolves to the response
 */
proto.proto.NoteServicePromiseClient.prototype.deleteNote =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.NoteService/DeleteNote',
      request,
      metadata || {},
      methodDescriptor_NoteService_DeleteNote);
};


module.exports = proto.proto;

